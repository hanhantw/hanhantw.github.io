<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://hanhantw.github.io/</id><title>Sonia Wu</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-10-28T22:34:27+08:00</updated> <author> <name>Sonia Wu</name> <uri>https://hanhantw.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://hanhantw.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://hanhantw.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2021 Sonia Wu </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Leetcode - 79. Word Search</title><link href="https://hanhantw.github.io/posts/Leetcode-79/" rel="alternate" type="text/html" title="Leetcode - 79. Word Search" /><published>2021-10-08T14:10:00+08:00</published> <updated>2021-10-08T14:10:00+08:00</updated> <id>https://hanhantw.github.io/posts/Leetcode-79/</id> <content src="https://hanhantw.github.io/posts/Leetcode-79/" /> <author> <name>Sonia Wu</name> </author> <category term="Python" /> <category term="Leetcode" /> <summary> Strategy: (Using Backtracking) Check the word from each cell. From each cell, we continue to check the rest word string for four directions if the cell matches the first char of the word recursively. Since we didn’t record the coming direction, we mark the coming cell as ‘#’ and recover it after finishing the iteration. If the rest word string is empty, meams we found the w... </summary> </entry> <entry><title>Leetcode - 56. Merge Intervals</title><link href="https://hanhantw.github.io/posts/Leetcode-56/" rel="alternate" type="text/html" title="Leetcode - 56. Merge Intervals" /><published>2021-10-04T14:10:00+08:00</published> <updated>2021-10-04T14:10:00+08:00</updated> <id>https://hanhantw.github.io/posts/Leetcode-56/</id> <content src="https://hanhantw.github.io/posts/Leetcode-56/" /> <author> <name>Sonia Wu</name> </author> <category term="Python" /> <category term="Leetcode" /> <summary> Strategy sort the intervals by the start value. a list result to save merged intervals and the default value is the first item of the intervals iterate through the intervals and see if the current interval should be merge with the previous interval in the result by the following rules: if the current interval begins after the previous interval, then they don’t over... </summary> </entry> <entry><title>How to test CI/CD on GCP image</title><link href="https://hanhantw.github.io/posts/test-CICD-on-GCP/" rel="alternate" type="text/html" title="How to test CI/CD on GCP image" /><published>2021-10-01T14:10:00+08:00</published> <updated>2021-10-01T14:10:00+08:00</updated> <id>https://hanhantw.github.io/posts/test-CICD-on-GCP/</id> <content src="https://hanhantw.github.io/posts/test-CICD-on-GCP/" /> <author> <name>Sonia Wu</name> </author> <category term="DevOps" /> <category term="CI/CD" /> <summary> Steps Run image google/cloud-sdk. In order to run docker command inside the container, we bind the host’s Docker socket instead of using dind. $ docker run -v /var/run/docker.sock:/var/run/docker.sock -it google/cloud-sdk Then, you may run your CI/CD script in the container. Authorizing access to GCP $ echo "$GCLOUD_SERVICE_KEY" &amp;gt; ~/gcloud-service-key.json $ gcloud auth act... </summary> </entry> <entry><title>Leetcode - 5. Longest Palindromic Substring</title><link href="https://hanhantw.github.io/posts/Leetcode-5/" rel="alternate" type="text/html" title="Leetcode - 5. Longest Palindromic Substring" /><published>2021-09-30T14:10:00+08:00</published> <updated>2021-09-30T14:10:00+08:00</updated> <id>https://hanhantw.github.io/posts/Leetcode-5/</id> <content src="https://hanhantw.github.io/posts/Leetcode-5/" /> <author> <name>Sonia Wu</name> </author> <category term="Python" /> <category term="Leetcode" /> <summary> Algorithm I. Brute force: it costs o(n^2) time to compute all substrings and o(n) time to varify if it is a palindrome. Therefore, the time complexity would be o(n^3) (pronounce as n cube). II. Dynamic programming: it would reduce time complexity to o(n^2) but increases space complexity to o(n^2) since it uses o(n^2) space to store the table. III. Expanding around center: since there are onl... </summary> </entry> <entry><title>Leetcode - 2. Add Two Numbers</title><link href="https://hanhantw.github.io/posts/Leetcode-2/" rel="alternate" type="text/html" title="Leetcode - 2. Add Two Numbers" /><published>2021-09-28T14:10:00+08:00</published> <updated>2021-09-28T14:10:00+08:00</updated> <id>https://hanhantw.github.io/posts/Leetcode-2/</id> <content src="https://hanhantw.github.io/posts/Leetcode-2/" /> <author> <name>Sonia Wu</name> </author> <category term="Python" /> <category term="Leetcode" /> <summary> Algorithm loop through the list until finish. 1.1 while looping add each value of two nodes Solution # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -&amp;gt; Optional[ListNode]: head1, head... </summary> </entry> </feed>
